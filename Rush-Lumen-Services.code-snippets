{
	 "Service Controller": {
		"prefix": "rush-service-controller",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Http\\Controllers;",
		  "",
		  "use App\\Services\\Contracts\\\\${1:Model}ServiceInterface;",
		  "use App\\Http\\Requests\\\\${1:Model}\\{",
		  "    StoreRequest,",
		  "    ShowRequest,",
		  "    UpdateRequest,",
		  "    DestroyRequest,",
		  "};",
		  "",
		  "class ${1:Model}Controller extends Controller",
		  "{",
		  "    /**",
		  "     * The service instance.",
		  "     *",
		  "     * @var \\App\\Services\\Contracts\\\\${1:Model}ServiceInterface",
		  "     */",
		  "    protected \\$service;",
		  "",
		  "    /**",
		  "     * Create the controller instance and resolve its service.",
		  "     * ",
		  "     * @param \\App\\Services\\Contracts\\\\${1:Model}ServiceInterface \\$service",
		  "     */",
		  "    public function __construct(${1:Model}ServiceInterface \\$service)",
		  "    {",
		  "        \\$this->service = \\$service;",
		  "    }",
		  "",
		  "    /**",
		  "     * Display a listing of the resource.",
		  "     *",
		  "     * @return \\Illuminate\\Http\\Response",
		  "     */",
		  "    public function index()",
		  "    {",
		  "        return \\$this->response(",
		  "            'Display a listing of the resource.',",
		  "            function () {",
		  "                return \\$this->service->index();",
		  "            }",
		  "        );",
		  "    }",
		  "",
		  "    /**",
		  "     * Store a newly created resource in storage.",
		  "     *",
		  "     * @param  \\App\\Http\\Requests\\\\${1:Model}\\StoreRequest  \\$request",
		  "     * @return \\Illuminate\\Http\\Response",
		  "     */",
		  "    public function store(StoreRequest \\$request)",
		  "    {",
		  "        \\$validatedRequest = \\$request->validated();",
		  "",
		  "        return \\$this->response(",
		  "            'Store a newly created resource in storage.',",
		  "            function () use (\\$validatedRequest) {",
		  "                return \\$this->service->store(\\$validatedRequest);",
		  "            }",
		  "        );",
		  "    }",
		  "",
		  "    /**",
		  "     * Display the specified resource.",
		  "     *",
		  "     * @param  \\App\\Http\\Requests\\\\${1:Model}\\ShowRequest  \\$request",
		  "     * @param  int|string  \\$id",
		  "     * @return \\Illuminate\\Http\\Response",
		  "     */",
		  "    public function show(ShowRequest \\$request, \\$id)",
		  "    {",
		  "        return \\$this->response(",
		  "            'Display the specified resource.',",
		  "            function () use (\\$id) {",
		  "                return \\$this->service->show(\\$id);",
		  "            }",
		  "        );",
		  "    }",
		  "",
		  "    /**",
		  "     * Update the specified resource in storage.",
		  "     *",
		  "     * @param  \\App\\Http\\Requests\\\\${1:Model}\\UpdateRequest  \\$request",
		  "     * @param  int|string  \\$id",
		  "     * @return \\Illuminate\\Http\\Response",
		  "     */",
		  "    public function update(UpdateRequest \\$request, \\$id)",
		  "    {",
		  "        \\$validatedRequest = \\$request->validated();",
		  "",
		  "        return \\$this->response(",
		  "            'Update the specified resource in storage.',",
		  "            function () use (\\$id, \\$validatedRequest) {",
		  "                return \\$this->service->update(\\$id, \\$validatedRequest);",
		  "            }",
		  "        );",
		  "    }",
		  "",
		  "    /**",
		  "     * Remove the specified resource from storage.",
		  "     *",
		  "     * @param  \\App\\Http\\Requests\\\\${1:Model}\\DestroyRequest  \\$request",
		  "     * @param  int|string \\$id",
		  "     * @return \\Illuminate\\Http\\Response",
		  "     */",
		  "    public function destroy(DestroyRequest \\$request, \\$id)",
		  "    {",
		  "        return \\$this->response(",
		  "            'Remove the specified resource from storage.',",
		  "            function () use (\\$id) {",
		  "                return \\$this->service->destroy(\\$id);",
		  "            }",
		  "        );",
		  "    }",
		  "}",
		  ""
		],
		"description": "Service Controller"
	  },

	  "Service Form Request": {
		"prefix": "rush-service-form-request",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Http\\Requests\\\\${1:Model};",
		  "",
		  "use App\\Http\\Requests\\FormRequest;",
		  "",
		  "class ${2:Action}Request extends FormRequest",
		  "{",
		  "    /**",
		  "     * Get the validation rules that apply to the request.",
		  "     * ",
		  "     * @return array",
		  "     */",
		  "    public function rules()",
		  "    {",
		  "        return [",
		  "            //",
		  "        ];",
		  "    }",
		  "",
		  "    /**",
		  "     * Set the custom validation.",
		  "     * ",
		  "     * @return void",
		  "     */",
		  "    public function validator()",
		  "    {",
		  "        //",
		  "    }",
		  "",
		  "    /**",
		  "     * Get the validation rules that apply to the request.",
		  "     * ",
		  "     * @return array",
		  "     */",
		  "    public function messages()",
		  "    {",
		  "        return [",
		  "            //",
		  "        ];",
		  "    }",
		  "}",
		  ""
		],
		"description": "Service Form Request"
	  },
	
	  "Service Class": {
		"prefix": "rush-service-class",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Services;",
		  "",
		  "use App\\Repositories\\Contracts\\\\${1:Model}RepositoryInterface;",
		  "use App\\Services\\Contracts\\\\${1:Model}ServiceInterface;",
		  "",
		  "class ${1:Model}Service extends Service implements ${1:Model}ServiceInterface",
		  "{",
		  "    /**",
		  "     * Create the service instance and inject its repository.",
		  "     *",
		  "     * @param App\\Repositories\\Contracts\\\\${1:Model}RepositoryInterface",
		  "     */",
		  "    public function __construct(${1:Model}RepositoryInterface \\$repository)",
		  "    {",
		  "        \\$this->repository = \\$repository;",
		  "    }",
		  "}",
		  ""
		],
		"description": "Service Class"
	  },

	  "Service Interface Class": {
		"prefix": "rush-service-interface",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Services\\Contracts;",
		  "",
		  "use App\\Services\\Support\\BaseContracts\\{",
		  "    IndexInterface as Index,",
		  "    StoreInterface as Store,",
		  "    ShowInterface as Show,",
		  "    UpdateInterface as Update,",
		  "    DestroyInterface as Destroy,",
		  "};",
		  "",
		  "interface ${1:Model}ServiceInterface extends Index, Store, Show, Update, Destroy",
		  "{",
		  "    /**",
		  "     * Here you insert custom functions.",
		  "     */",
		  "}",
		  ""
		],
		"description": "Service Interface Class"
	  },

	  "Service Repository Class": {
		"prefix": "rush-service-repository",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Repositories;",
		  "",
		  "use App\\Models\\\\${1:Model};",
		  "use App\\Repositories\\Contracts\\\\${1:Model}RepositoryInterface;",
		  "",
		  "class ${1:Model}Repository extends Repository implements ${1:Model}RepositoryInterface",
		  "{",
		  "    /**",
		  "     * Create the repository instance.",
		  "     *",
		  "     * @param \\App\\Models\\\\${1:Model}",
		  "     */",
		  "    public function __construct(${1:Model} \\$model)",
		  "    {",
		  "        \\$this->model = \\$model;",
		  "    }",
		  "}",
		  ""
		],
		"description": "Service Repository Class"
	  },

	  "Service Repository Interface Class": {
		"prefix": "rush-service-repository-interface",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Repositories\\Contracts;",
		  "",
		  "use App\\Repositories\\Support\\BaseContracts\\{",
		  "    AllInterface as All,",
		  "    CreateInterface as Create,",
		  "    FindInterface as Find,",
		  "    UpdateInterface as Update,",
		  "    DeleteInterface as Delete,",
		  "};",
		  "",
		  "interface ${1:Model}RepositoryInterface extends All, Create, Find, Update, Delete",
		  "{",
		  "    /**",
		  "     * Here you insert custom functions.",
		  "     */",
		  "}",
		  ""
		],
		"description": "Service Repository Interface Class"
	  },

	  "Service Observer Class": {
		"prefix": "rush-service-observer",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Observers;",
		  "",
		  "use App\\Models\\\\${1:Model};",
		  "",
		  "class ${1:Model}Observer extends ActivityLog",
		  "{",
		  "    /**",
		  "     * Handle the ${1:Model} \"created\" event.",
		  "     *",
		  "     * @param  \\App\\Models\\\\${1:Model}  \\$model",
		  "     * @return void",
		  "     */",
		  "    public function created(${1:Mmodel} \\$model)",
		  "    {",
		  "        \\$this->log([",
		  "            'old_data' => [],",
		  "            'new_data' => \\$model,",
		  "            'service' => '${2:Service}',",
		  "            'activity_type' => 'Create ${1:Model}'",
		  "        ]);",
		  "    }",
		  "",
		  "    /**",
		  "     * Handle the ${1:Model} \"updated\" event.",
		  "     *",
		  "     * @param  \\App\\Models\\\\${1:Model}  \\$model",
		  "     * @return void",
		  "     */",
		  "    public function updated(${1:Model} \\$model)",
		  "    {",
		  "        \\$this->log([",
		  "            'old_data' => \\$model->getOriginal(),",
		  "            'new_data' => \\$model,",
		  "            'service' => '${2:Service}',",
		  "            'activity_type' => 'Update ${1:Model}'",
		  "        ]);",
		  "    }",
		  "",
		  "    /**",
		  "     * Handle the ${1:Model} \"deleted\" event.",
		  "     *",
		  "     * @param  \\App\\Models\\\\${1:Model}  \\$model",
		  "     * @return void",
		  "     */",
		  "    public function deleted(${1:Model} \\$model)",
		  "    {",
		  "        \\$this->log([",
		  "            'old_data' => \\$model->getAttributes(),",
		  "            'new_data' => [\"data\" => \"deleted\"],",
		  "            'service' => '${2:Service}',",
		  "            'activity_type' => 'Delete ${1:Model}'",
		  "        ]);",
		  "    }",
		  "}",
		  ""
		],
		"description": "Service Observer Class"
	  },

	  "Service Action Class": {
		"prefix": "rush-service-action",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Actions\\\\${1:Model};",
		  "",
		  "use App\\Repositories\\Contracts\\\\${1:Model}RepositoryInterface as ${1:Model}Repository;",
		  "",
		  "class ${2:Action}",
		  "{",
		  "    /**",
		  "     * @var App\\Repositories\\Contracts\\\\${1:Model}RepositoryInterface",
		  "     */",
		  "    protected \\$repository;",
		  "",
		  "    /**",
		  "     * Create the action instance and inject its dependencies.",
		  "     *",
		  "     * @param App\\Repositories\\Contracts\\\\${1:Model}RepositoryInterface \\$repository",
		  "     */",
		  "    public function __construct(${1:Model}Repository \\$repository)",
		  "    {",
		  "        \\$this->repository = \\$repository;",
		  "    }",
		  "",
		  "    /**",
		  "     * Handle the action",
		  "     * ",
		  "     * @return mixed",
		  "     */",
		  "    public function execute()",
		  "    {",
		  "        return \\$this;",
		  "    }",
		  "}",
		  ""
		],
		"description": "Service Action Class"
	  },

	  "Service Source Interface Class": {
		"prefix": "rush-service-source-interface",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Sources\\\\${1:Source}\\Contracts;",
		  "",
		  "use App\\Sources\\Support\\BaseContracts\\{",
		  "    StoreInterface as Store,",
		  "    DeleteInterface as Delete,",
		  "    UpdateInterface as Update,",
		  "};",
		  "",
		  "interface ${2:API}SourceInterface extends Store, Delete, Update",
		  "{",
		  "    /**",
		  "     * Here you insert custom functions.",
		  "     */",
		  "}",
		  ""
		],
		"description": "Service Source Interface Class"
	  },

	  "Service Source Class": {
		"prefix": "rush-service-source",
		"body": [
		  "<?php",
		  "",
		  "namespace App\\Sources\\\\${1:Source};",
		  "",
		  "use Rush\\Helper\\MicroService;",
		  "",
		  "use App\\Sources\\Source;",
		  "use App\\Sources\\\\${1:Source}\\Contracts\\\\${2:API}SourceInterface;",
		  "",
		  "class ${2:API}Source extends Source implements ${2:API}SourceInterface",
		  "{",
		  "    /**",
		  "     * Create the source instance and declare the route endpoint.",
		  "     * ",
		  "     * @param Rush\\Helper\\MicroService",
		  "     */",
		  "    public function __construct(MicroService \\$microService)",
		  "    {",
		  "        \\$this->route = sprintf('%s', env('SERVICE_URL'));",
		  "",
		  "        \\$this->token = \\$microService->generateToken(env('SERVICE_NAME'), env('SERVICE_KEY'));",
		  "    }",
		  "}",
		  ""
		],
		"description": "Service Source Class"
	  }
}